//group 'com.jetbrains.rd'
version = System.getenv("RELEASE_VERSION_NUMBER") ?: 'SNAPSHOT'

buildscript {
    apply from: 'versions.gradle'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.11"
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

allprojects {
    ext.configurePublishing = {
        publishing {
            publications {
                String mvnId = project.name
                if (mvnId.endsWith('-jvm'))
                    mvnId = mvnId.substring(0, mvnId.length() - 4)
                else if (mvnId.endsWith("-core") || mvnId.endsWith("-framework"))
                    mvnId = mvnId + "-common"

                maven(MavenPublication) {
                    groupId 'com.jetbrains.rd'
                    artifactId mvnId
                    version System.getenv("RELEASE_VERSION_NUMBER") ?: 'SNAPSHOT'

                    from components.java

                    artifact sourceJar
//                    artifact packageJavadoc
                }
            }
            repositories {
                maven {
                    url "https://www.myget.org/F/rd-snapshots/maven/"
                    credentials {
                        username = System.getenv("MYGET_USERNAME")
                        password = System.getenv("MYGET_PASSWORD")
                    }
                }
            }
        }
    }

    ext.applyKotlinJS = {
        apply plugin: 'kotlin-platform-js'
        apply plugin: 'maven-publish'

        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
        }

        def target = "${projectDir}/build/classes/main"
        def projectName = name

        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
        }

        compileKotlin2Js {
            kotlinOptions.metaInfo = true
            kotlinOptions.outputFile = "$target/${projectName}.js"
            kotlinOptions.sourceMap = true
            kotlinOptions.moduleKind = 'commonjs'
            kotlinOptions.main = 'call'
            kotlinOptions.typedArrays = true
        }

        compileTestKotlin2Js {
            kotlinOptions.metaInfo = true
            kotlinOptions.outputFile = "$target/${projectName}.test.js"
            kotlinOptions.sourceMap = true
            kotlinOptions.moduleKind = 'commonjs'
            kotlinOptions.main = 'call'
            kotlinOptions.typedArrays = true
        }

        kotlin { experimental.coroutines = 'enable' }
    }



    ext.applyKotlinJVM = {
        apply plugin: 'java'
        apply plugin: 'kotlin-platform-jvm'
        apply plugin: "jacoco"
        apply plugin: 'maven-publish'
        apply plugin: 'org.jetbrains.dokka'


        task sourceJar(type: Jar) {
            from sourceSets.main.kotlin
            if (project.parent.name != "rd")
                from project.parent.sourceSets.main.kotlin
            classifier = "sources"
        }

        dokka {
            outputFormat = 'html'
            outputDirectory = "$buildDir/javadoc"
        }


        task packageJavadoc(type: Jar){
            dependsOn dokka
            from "$buildDir/javadoc"
            classifier = 'javadoc'
        }

        compileKotlin {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }

        compileTestKotlin {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }

        configurePublishing()

        test {
            maxHeapSize = "512m"
            finalizedBy jacocoTestReport
        }

        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

            testCompile "junit:junit:$junit_version"
            testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        }
    }

    ext.configureNodePlugin = {
        apply plugin: 'com.moowork.node'

        node {

            // Version of node to use.
            version = '8.7.0'

            // Version of npm to use.
            //npmVersion = '3.10.8'

            // Version of yarn to use.
            yarnVersion = '1.2.1'

            // Base URL for fetching node distributions (change if you have a mirror).
            distBaseUrl = 'https://nodejs.org/dist'

            // If true, it will download node using above parameters.
            // If false, it will try to use globally installed node.
            download = true

            // Set the work directory for unpacking node
            workDir = file("${rootProject.buildDir}/nodejs")

            // Set the work directory where node_modules should be located
            nodeModulesDir = file("${rootProject.projectDir}")
        }
    }

    ext.applyMultiplatform = {
        group 'com.jetbrains.rd'
        version System.getenv("RELEASE_VERSION_NUMBER") ?: 'SNAPSHOT'

        apply plugin: 'org.jetbrains.kotlin.multiplatform'
        apply plugin: 'maven-publish'
        apply plugin: 'org.jetbrains.dokka'

        kotlin {
            targets {
                fromPreset(presets.jvm, 'jvm') {
                    mavenPublication {
                        artifactId project.name
                    }
                }
                fromPreset(presets.js, 'js') {
                }
                metadata {
                    mavenPublication {
                        artifactId project.name + "-common"
                    }
                }
            }

            sourceSets {
                commonMain {
                    dependencies {
                        implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'
                    }
                }
                commonTest {
                    dependencies {
                        implementation "org.jetbrains.kotlin:kotlin-test-common"
                        implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
                    }

                }
                jvmMain {
                    dependencies {
                        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                        implementation "org.jetbrains.kotlin:kotlin-reflect"
                    }
                }
                jvmTest {
                    dependencies {
                        implementation "junit:junit:$junit_version"
                        implementation "org.jetbrains.kotlin:kotlin-test"
                        implementation "org.jetbrains.kotlin:kotlin-test-junit"
                    }
                }
                jsMain {
                    dependencies {
                        implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
                    }
                }
                jsTest {
                    dependencies {
                        implementation "org.jetbrains.kotlin:kotlin-test-js"
                    }
                }
            }
        }

        dokka {
            outputFormat = 'html'
            outputDirectory = "$buildDir/javadoc"
            kotlinTasks { }
            sourceDirs = files("src/commonMain/kotlin", "src/jvmMain/kotlin")
        }

        task packageJavadoc(type: Jar){
            dependsOn dokka
            from "$buildDir/javadoc"
            classifier = 'javadoc'
        }

        publishing {
            repositories {
                maven {
                    url "https://www.myget.org/F/rd-snapshots/maven/"
                    credentials {
                        username = System.getenv("MYGET_USERNAME")
                        password = System.getenv("MYGET_PASSWORD")
                    }
                }
            }
        }
    }

    configurations.all {
        resolutionStrategy {
            force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}
